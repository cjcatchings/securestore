# Default values for securestore.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

postgres:
  dbpassword: ""
  dbuser: "postgres"
  portName: "5432-5432"
  portNumber: 5432
  targetPortNumber: 5432

keycloak:
  kcAdmin: "admin"
  kcPassword: ""
  kcSecureStoreUser: "secstoreuser"
  kcSecsureStoreUserPassword: ""
  kcSecureStoreAdmin: "secstoreadmin"
  kcSecureStoreAdminPassword: ""
  kcSecureStoreClientId: "securestore"
  kcSecureStoreClientSecret: ""
  kcDatabaseName: "secstore_kc"
  kcDatabaseUser: "securestore_admin"
  kcDatabasePassword: ""
  kcHostname: "localhost"
  kcHostPort: "30843"
  kcHostAdminUrl: "https://localhost:30843"
  kcHostDebug: "false"
  kcKeystorePassword: ""
  kcHttpPortName: "kc-http"
  kcHttpPortNumber: 8080
  kcHttpTargetPortNumber: 8080
  kcHttpsPortName: "kc-https"
  kcHttpsPortNumber: 8443
  kcHttpsTargetPortNumber: 8443
  kcHttpsNodePortNumber: 30843

ssbackend:
  beTargetPortNumber: 8080
  bePortName: "secstorebe"
  bePortNumber: 8580

ssfrontend:
  feTargetPortNumber: 3000
  fePortName: "secstorefe"
  fePortNumber: 3000